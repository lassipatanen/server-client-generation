/*
 * TestBed
 *
 * TestBed dataspace for standardizing data
 *
 * The version of the OpenAPI document: 1.0
 * Contact: lassi.patanen@gofore.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Testbed.Api.Codegen.Converters;

namespace Testbed.Api.Codegen.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public class TaxCard : IEquatable<TaxCard>
    {
        /// <summary>
        /// Gets or Sets Identifier
        /// </summary>
        [DataMember(Name="identifier", EmitDefaultValue=true)]
        public Guid? Identifier { get; set; }

        /// <summary>
        /// Gets or Sets Ssn
        /// </summary>
        [DataMember(Name="ssn", EmitDefaultValue=false)]
        public string Ssn { get; set; }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum AEnum for A
            /// </summary>
            [EnumMember(Value = "A")]
            AEnum = 1,
            
            /// <summary>
            /// Enum BEnum for B
            /// </summary>
            [EnumMember(Value = "B")]
            BEnum = 2
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Gets or Sets ValidFromDate
        /// </summary>
        [DataMember(Name="validFromDate", EmitDefaultValue=false)]
        public DateTime ValidFromDate { get; set; }

        /// <summary>
        /// Gets or Sets IncomeLimit
        /// </summary>
        [DataMember(Name="incomeLimit", EmitDefaultValue=true)]
        public decimal IncomeLimit { get; set; }

        /// <summary>
        /// Gets or Sets Percentage
        /// </summary>
        [DataMember(Name="percentage", EmitDefaultValue=true)]
        public decimal Percentage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxCard {\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  Ssn: ").Append(Ssn).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ValidFromDate: ").Append(ValidFromDate).Append("\n");
            sb.Append("  IncomeLimit: ").Append(IncomeLimit).Append("\n");
            sb.Append("  Percentage: ").Append(Percentage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TaxCard)obj);
        }

        /// <summary>
        /// Returns true if TaxCard instances are equal
        /// </summary>
        /// <param name="other">Instance of TaxCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxCard other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Identifier == other.Identifier ||
                    Identifier != null &&
                    Identifier.Equals(other.Identifier)
                ) && 
                (
                    Ssn == other.Ssn ||
                    Ssn != null &&
                    Ssn.Equals(other.Ssn)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    ValidFromDate == other.ValidFromDate ||
                    ValidFromDate != null &&
                    ValidFromDate.Equals(other.ValidFromDate)
                ) && 
                (
                    IncomeLimit == other.IncomeLimit ||
                    
                    IncomeLimit.Equals(other.IncomeLimit)
                ) && 
                (
                    Percentage == other.Percentage ||
                    
                    Percentage.Equals(other.Percentage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Identifier != null)
                    hashCode = hashCode * 59 + Identifier.GetHashCode();
                    if (Ssn != null)
                    hashCode = hashCode * 59 + Ssn.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (ValidFromDate != null)
                    hashCode = hashCode * 59 + ValidFromDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + IncomeLimit.GetHashCode();
                    
                    hashCode = hashCode * 59 + Percentage.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TaxCard left, TaxCard right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TaxCard left, TaxCard right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
